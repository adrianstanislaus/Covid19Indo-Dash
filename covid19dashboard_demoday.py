# -*- coding: utf-8 -*-
"""Covid19Dashboard-DemoDay

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B0KZYwpLdgRXlV6B2HY64Cv2u4uvVnrc

Set-up Tools dan Library
"""

#Import python packages dan library
import pandas as pd
import numpy as np
import warnings
warnings.filterwarnings('ignore')
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import datetime as dt
from datetime import timedelta
from sklearn.model_selection import GridSearchCV
from sklearn.preprocessing import StandardScaler
from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score,silhouette_samples
from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,r2_score
import statsmodels.api as sm
from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing
from fbprophet import Prophet
from sklearn.preprocessing import PolynomialFeatures
from statsmodels.tsa.stattools import adfuller
!pip install pyramid-arima
from pyramid.arima import auto_arima
std=StandardScaler()

#Membaca CSV Data
datacovid = pd.read_csv('/content/drive/MyDrive/Pemlan SEKUY/Data COVID/Data terbaru/1Desember-statistik.csv')

"""#  **Part 1 :Filter dan Cleaning Data**

Di tahap ini, yang kami lakukan adalah :
1. Mengganti format tanggal dengan format tanggal pandas
2. mengganti index dengan *feature* tanggal
3. *drop* feature yang tidak digunakan untuk analisis dan visualisasi data
"""

#Membaca Informasi dataframe
datacovid.info()

datacovid.rename( columns={'Unnamed: 0':'tanggal'}, inplace=True )
datacovid["tanggal"]=pd.to_datetime(datacovid["tanggal"])
datacovid

datacovid.set_index("tanggal", inplace = True)
datacovid

print(datacovid.shape)
datacovid["Days Since"]=datacovid.index-datacovid.index.min()
datacovid

#datacovid.drop(datacovid.columns[31],1,inplace=True)
datacovid.info()

datacovid

"""# **Part 2: Visualisasi Data**"""

import plotly.graph_objects as go
fig1 = go.Figure()



#Total Kasus
fig1.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Total kasus'],
                  name='Total Kasus Positif', mode='lines'))

#Kasus Aktif
fig1.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Kasus aktif'],
                  name='Kasus Aktif', mode='lines'))

#Total Sembuh
fig1.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Sembuh'],
                  name='Total Sembuh', mode='lines'))

#Total Meninggal
fig1.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Meninggal\nDunia'],
                  name='Total Korban Jiwa', mode='lines'))

fig1.update_layout(title='Covid-19 di Indonesia (20 Oktober 2020)',margin=dict(l=20, r=20, t=80, b=20),
                   showlegend=True, xaxis_title="Tanggal",yaxis_title="Jumlah Kasus",hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig1.show()

fig2 = go.Figure()

#Kasus Baru
fig2.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Kasus baru'],
                  name='Kasus Positif Baru'))

fig2.update_layout(title='Kasus Baru',margin=dict(l=20, r=20, t=20, b=20),
                   showlegend=True, hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))
fig2.update_xaxes(showspikes=True)

fig2.show()

#Sembuh
fig3 = go.Figure()
fig3.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Sembuh\n(baru)'],
                  name='Sembuh Baru', mode='lines'))

fig3.update_layout(title='Sembuh Baru',margin=dict(l=20, r=20, t=20, b=20),
                   showlegend=True, hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))
fig3.show()

#Meninggal
fig4= go.Figure()
fig4.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Meninggal\n(baru)'],
                  name='Meninggal Dunia Baru', mode='lines'))

fig4.update_layout(title='Meninggal Dunia Baru',margin=dict(l=20, r=20, t=20, b=20),
                   showlegend=True, hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig4.show()

#Tes Covid 19 di Indonesia
fig5 = go.Figure()

#PCR orang Harian
fig5.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Orang yang dites'],
                  name='Jumlah Tes PCR'))

#Spesimen Harian
fig5.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Spesimen'],
                  name='Jumlah Spesimen'))

fig5.update_layout(title='Tes Covid 19 di Indonesia per Hari',
                   hovermode='x', xaxis_title="Tanggal",yaxis_title="Jumlah",legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig5.show()

fig6 = go.Figure()

#PCR orang Harian
fig6.add_trace(go.Bar(x = datacovid.index, y = datacovid['Orang yang dites'],
                  name='Jumlah Tes PCR'))

#rata-rata PCR orang mingguan
fig6.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Jumlah orang diperiksa (rata-rata 7 hari)'],
                  name='Rata-rata Jumlah Tes PCR per Minggu'))

fig6.update_layout(title='Jumlah Orang yang Melakukan Tes PCR per Hari', xaxis_title="Tanggal",yaxis_title="Jumlah Tes",legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig6.show()

fig7 = go.Figure()

#Positive rate harian
fig7.add_trace(go.Bar(x = datacovid.index, y = datacovid['Positive rate harian'],
                  name='Rasio Positif/dites harian'))

#Positive rate mingguan
fig7.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Positive rate mingguan'],
                  name='Rata-rata Rasio Positif/dites mingguan'))

fig7.update_layout(title='Rasio Jumlah orang yang Positif per jumlah Orang yang Diperiksa',
                   showlegend=True,hovermode="x", xaxis_title="Tanggal",yaxis_title="Rasio",legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig7.show()

#Rasio jumlah spesimen/orang diperiksa (5)
fig8 = go.Figure()


#Jumlah spesimen diperiksa (rata-rata 7 hari)
fig8.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Jumlah spesimen diperiksa (rata-rata 7 hari)'],
                  name='Jumlah spesimen diperiksa (rata-rata 7 hari)', mode='lines'))

#Jumlah orang diperiksa (rata-rata 7 hari)
fig8.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Jumlah orang diperiksa (rata-rata 7 hari)'],
                  name='Jumlah orang diperiksa (rata-rata 7 hari)', mode='lines'))

fig8.update_layout(title='Jumlah Spesimen/Orang Diperiksa',
                   showlegend=True, xaxis_title="Tanggal",yaxis_title="Jumlah",hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

fig8.show()

fig9 = go.Figure()

#Rasio Sampel/Orang
fig9.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Rasio spesimen/orang diperiksa (rata-rata 7 hari)'],
                  name='Rasio Sampel/Orang Diperiksa', mode='lines'))

fig9.update_layout(title='Rata-Rata Rasio Sampel/Orang Diperiksa per 7 Hari',
                   showlegend=True, xaxis_title="Tanggal",yaxis_title="Rasio",hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

dataprovinsi = pd.read_csv('/content/drive/MyDrive/Pemlan SEKUY/Data COVID/Data terbaru/1Desember-provinsi.csv')
dataprovinsi.rename( columns={'Unnamed: 2':'Kasus'}, inplace=True )
dataprovinsi

import plotly.express as px

fig10 = px.pie(dataprovinsi, values='Kasus', names='Provinsi Asal',
             title='Kasus Covid-19 per Provinsi')
fig10.update_traces(textposition='inside', textinfo='percent+label')
fig10.update_traces(hovertemplate='%{label} <br>%{value} Kasus')

fig10.show()

#MAPBOX
from urllib.request import urlopen
import json
with urlopen('https://raw.githubusercontent.com/ans-4175/peta-indonesia-geojson/master/indonesia-prov.geojson') as response:
    provinsi = json.load(response)

provinsi["features"][0]

#pandas
province = pd.read_csv("/content/drive/MyDrive/Pemlan SEKUY/Data COVID/Data terbaru/1Desember-provinsi.csv",
                   dtype={"id": str})
province

#Implementasi Map
fig11 = px.choropleth_mapbox(province, geojson=provinsi, locations='id', color='Kasus',
                           color_continuous_scale="Oryel",
                           range_color=(500,140000 ),
                           mapbox_style="carto-positron",
                           zoom=4, center = {"lat": -2.548926 , "lon": 118.0148634},
                           opacity=0.5,
                           labels={'kasus':'Jumlah kasus'},custom_data=["Provinsi Asal"])
fig11.update_layout(margin={"r":0,"t":0,"l":0,"b":0},legend=dict(orientation="h",yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1))
fig11.update_traces(hovertemplate='%{customdata} <br>%{z} kasus')
fig11.show()

persentase_penting = datacovid.tail()

persentase_covid = persentase_penting[['% kasus aktif','Tingkat kesembuhan (seluruh kasus)','Tingkat kematian (seluruh kasus)','Positive rate harian','Case Growth Rate']]

persentase_covid

fig_persentase = go.Figure()

#Positive rate harian
fig_persentase.add_trace(go.Bar(y = persentase_covid['% kasus aktif'],
                  name='Kasus Aktif',text=persentase_covid['% kasus aktif'],x = persentase_covid.index))

fig_persentase.add_trace(go.Bar(y = persentase_covid['Tingkat kesembuhan (seluruh kasus)'],
                  name='Tingkat Kesembuhan',text=persentase_covid['Tingkat kesembuhan (seluruh kasus)'],x = persentase_covid.index))

fig_persentase.add_trace(go.Bar(y = persentase_covid['Tingkat kematian (seluruh kasus)'],
                  name='Tingkat Kematian',text=persentase_covid['Tingkat kematian (seluruh kasus)'],x = persentase_covid.index))

fig_persentase.add_trace(go.Bar(y = persentase_covid['Positive rate harian'],
                  name='Positive Rate Harian',text=persentase_covid['Positive rate harian'],x = persentase_covid.index))

fig_persentase.add_trace(go.Bar(y = persentase_covid['Case Growth Rate'],
                  name='Case Growth Rate',text=persentase_covid['Case Growth Rate'],x = persentase_covid.index))

fig_persentase.update_traces(texttemplate='%{text}', textposition='outside')

fig_persentase.update_layout(title="Data Covid 5 Hari Terakhir dalam Persentase (%)", xaxis_title="Tanggal",yaxis_title="Persentase (%)",
                   showlegend=True,margin=dict(l=20, r=20, t=20, b=20),legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))



fig_persentase.show()

"""# Part 3: Forecasting dengan Machine Learning Model"""

model_scores=[]

new_date=[]

for i in range(1,18):
     new_date.append(datacovid.index[-1]+timedelta(days=i))
pd.set_option('display.float_format', lambda x: '%.6f' % x)
model_predictions=pd.DataFrame(zip(new_date),
                               columns=["Dates"])
model_predictions

#Facebook Prophet
prophet_c=Prophet(interval_width=0.99,weekly_seasonality=True)
prophet_confirmed=pd.DataFrame(zip(list(datacovid.index),list(datacovid["Total kasus"])),columns=['ds','y'])
prophet_confirmed

prophet_c.fit(prophet_confirmed)

forecast_c=prophet_c.make_future_dataframe(periods=17)
forecast_confirmed=forecast_c.copy()

confirmed_forecast=prophet_c.predict(forecast_c)
print(confirmed_forecast[['ds','yhat', 'yhat_lower', 'yhat_upper']])

model_scores.append(np.sqrt(mean_squared_error(datacovid["Total kasus"],confirmed_forecast['yhat'].head(datacovid.shape[0]))))
print("Root Mean Squared Error for Prophet Model: ",np.sqrt(mean_squared_error(datacovid["Total kasus"],confirmed_forecast['yhat'].head(datacovid.shape[0]))))

print(prophet_c.plot(confirmed_forecast))

print(prophet_c.plot_components(confirmed_forecast))

model_predictions["Prophet's Prediction"]=list(confirmed_forecast["yhat"].tail(17))
model_predictions["Prophet's Upper Bound"]=list(confirmed_forecast["yhat_upper"].tail(17))
model_predictions.head()

model_scores

model_train=datacovid.iloc[:int(datacovid.shape[0]*0.99)]
valid=datacovid.iloc[int(datacovid.shape[0]*0.99):]
y_pred=valid.copy()

#SARIMA
model_sarima= auto_arima(model_train["Total kasus"],trace=True, error_action='ignore', 
                         start_p=0,start_q=0,max_p=2,max_q=2,m=7,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima.fit(model_train["Total kasus"])

prediction_sarima=model_sarima.predict(len(valid))
y_pred["SARIMA Model Prediction"]=prediction_sarima

model_scores.append(np.sqrt(mean_squared_error(valid["Total kasus"],y_pred["SARIMA Model Prediction"])))
print("Root Mean Square Error for SARIMA Model: ",np.sqrt(mean_squared_error(valid["Total kasus"],y_pred["SARIMA Model Prediction"])))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Total kasus"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Total kasus"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["SARIMA Model Prediction"],
                    mode='lines+markers',name="Prediction for Confirmed Cases",))
fig.update_layout(title="Confirmed Cases SARIMA Model Prediction",
                 xaxis_title="Date",yaxis_title="Confirmed Cases",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

SARIMA_model_new_prediction=[]
for i in range(1,18):
    SARIMA_model_new_prediction.append(model_sarima.predict(len(valid)+i)[-1])
model_predictions["SARIMA Model Prediction"]=SARIMA_model_new_prediction
model_predictions.head()

model_scores

#Holt's Linear
model_train=datacovid.iloc[:int(datacovid.shape[0]*0.99)]
valid=datacovid.iloc[int(datacovid.shape[0]*0.99):]
y_pred=valid.copy()

holt=Holt(np.asarray(model_train["Total kasus"])).fit(smoothing_level=0.4, smoothing_slope=0.4,optimized=False)

y_pred["Holt"]=holt.forecast(len(valid))
model_scores.append(np.sqrt(mean_squared_error(y_pred["Total kasus"],y_pred["Holt"])))
print("Root Mean Square Error Holt's Linear Model: ",np.sqrt(mean_squared_error(y_pred["Total kasus"],y_pred["Holt"])))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["Total kasus"],
                    mode='lines+markers',name="Train Data for Confirmed Cases"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["Total kasus"],
                    mode='lines+markers',name="Validation Data for Confirmed Cases",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["Holt"],
                    mode='lines+markers',name="Prediction of Confirmed Cases",))
fig.update_layout(title="Confirmed Cases Holt's Linear Model Prediction",
                 xaxis_title="Date",yaxis_title="Confirmed Cases",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

holt_new_date=[]
holt_new_prediction=[]
for i in range(1,18):
    holt_new_date.append(datacovid.index[-1]+timedelta(days=i))
    holt_new_prediction.append(holt.forecast((len(valid)+i))[-1])

model_predictions["Holt's Linear Model Prediction"]=holt_new_prediction
model_predictions.head()

model_predictions.drop(model_predictions[["Prophet's Upper Bound"]],1,inplace=True)
model_predictions

model_names=["Facebook's Prophet Model","SARIMA Model","Holt's Linear"]
model_summary=pd.DataFrame(zip(model_names,model_scores),columns=["Model Name","Root Mean Squared Error"]).sort_values(["Root Mean Squared Error"])
model_summary

df = pd.DataFrame(model_names,columns=['nama_modelml'])
nomor=df[df['nama_modelml'] == "SARIMA Model"].index[0]
df

df['nama_modelml'].values[-1]

figml = go.Figure()

#Total Kasus
figml.add_trace(go.Scatter(x = model_predictions['Dates'], y = model_predictions["SARIMA Model Prediction"],
                  name='Prediksi', mode='lines'))

figml.add_trace(go.Scatter(x = datacovid.index, y = datacovid['Total kasus'],
                  name='Total Kasus Positif', mode='lines'))
figml.update_layout(showlegend=True, xaxis_title="Tanggal",yaxis_title="Jumlah Kasus",hovermode='x',legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
))

figml.show()

datacovid.tail()

y_pred

"""# Part 4: Web-app dengan Dash Library"""

!pip install jupyter-dash

import plotly.express as px
from jupyter_dash import JupyterDash
import dash_core_components as dcc
import dash_html_components as html
from dash.dependencies import Input, Output

external_stylesheets = ['https://codepen.io/chriddyp/pen/bWLwgP.css']

nama_model = df['nama_modelml'].unique()
case_total = datacovid['Total kasus'].values[-1]
case_baru= datacovid['Kasus baru'].values[-1]
case_aktif= datacovid['Kasus aktif'].values[-1]
case_sembuh= datacovid['Sembuh'].values[-1]
case_meninggal= datacovid['Meninggal\nDunia'].values[-1]
x = datacovid.index.values[-1] 
t= pd.to_datetime(str(x)) 
tanggal_hari_ini = t.strftime('%A, %d %B %Y')

edit = {
    'background': '#F9F8FD',
    'text': '#323232',
    'box': '#F9F9F9'
}
# Build App
app = JupyterDash(__name__,external_stylesheets=external_stylesheets)

app.layout = html.Div(className="row",style={'backgroundColor': edit['background'],'color': edit['text'],},children=[
    html.Div(style={'padding':'30px 20px 0px 60px','margin':'0px 0px 10px 0px','color':'#0E1012'},children=[
    html.H1(style={'font-size': '30px'},children='Covid-19 Dashboard')]),



html.Div(className="row",children=[
  html.Div(className='three columns',children=[html.Div(style={'font-size':'20px','color':'#FFFFFF'} ,children=tanggal_hari_ini),html.Div(style={'font-weight':'1px','color':'#FFFFFF'} ,children='Tanggal Pembaharuan Data')],style={'padding':'10px','border-radius':'10px','margin':'10px','backgroundColor':'#2E2E2E','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
    html.Div(className='two columns',children=[html.Div(style={'font-size':'30px',} ,children=case_baru),html.Div(style={'font-weight':'1px','color':'#5E637C'} ,children='Kasus Baru')],style={'padding':'10px','border-radius':'10px','margin':'10px','backgroundColor':'#EBE6FF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
     html.Div(className='two columns',children=[html.Div(style={'font-size':'30px',} ,children=case_total),html.Div(style={'font-weight':'1px','color':'#5E637C'} ,children='Terkonfirmasi')],style={'padding':'10px','border-radius':'10px','margin':'10px','backgroundColor':'#FFFFFF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
      html.Div(className='two columns',children=[html.Div(style={'font-size':'30px',} ,children=case_aktif),html.Div(style={'font-weight':'1px','color':'#5E637C'} ,children='Kasus Aktif')],style={'padding':'10px','border-radius':'10px','margin':'10px','backgroundColor':'#FFF1D8','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
       html.Div(className='two columns',children=[html.Div(style={'font-size':'30px',} ,children=case_sembuh),html.Div(style={'font-weight':'1px','color':'#5E637C'} ,children='Sembuh')],style={'padding':'10px','border-radius':'10px','margin':'10px','backgroundColor':'#CEFFDD','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
        html.Div(className='two columns',children=[html.Div(style={'font-size':'30px',} ,children=case_meninggal),html.Div(style={'font-weight':'1px','color':'#5E637C',} ,children='Meninggal Dunia')],style={'padding':'10px','border-radius':'10px','margin':'10px','backgroundColor':'#FE9B87','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),


],style={'padding':'1px 5px 1px 5px','margin':'0px 60px 20px 50px'}),


 


    html.Div([dcc.Graph(
        id='graph-1',
        figure=fig11,style={'height':'70vh'}
    )],style={'padding':'0px 10px 0px 0px','margin':'10px 60px 20px 60px','backgroundColor':'#FFFFFF','border-radius':'15px','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),



html.Div(className="row",children=[
    html.Div(className='six columns',children=[dcc.Graph(
        id='graph-2',
        figure=fig1,style={'height':'70vh'}
    )],style={'padding':'1px 5px 1px 5px','border-radius':'10px','margin':'10px','backgroundColor':'#FFFFFF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),

    html.Div(className='six columns',children=[dcc.Graph(
        id='graph-province',
        figure=fig10,style={'height':'70vh'}
    )],style={'padding':'1px 5px 1px 5px','border-radius':'10px','margin':'10px','backgroundColor':'#FFFFFF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
],style={'padding':'1px 5px 1px 5px','margin':'10px 60px 20px 60px'}),


 html.Div(className='row',children=[
     html.Div(className='four columns',children=[dcc.Graph(
        id='graph-3',
        figure=fig2,style={'height':'70vh'}
    )],style={'padding':'10px 5px 1px 5px','border-radius':'10px','backgroundColor':'#FFFFFF','margin':'10px','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),

     html.Div(className='four columns',children=[dcc.Graph(
        id='graph-4',
        figure=fig3,style={'height':'70vh'}
    )],style={'padding':'10px 5px 1px 5px','border-radius':'10px','backgroundColor':'#FFFFFF','margin':'10px','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
 

     html.Div(className='four columns',children=[dcc.Graph(
        id='graph-5',
        figure=fig4,style={'height':'70vh'}
    )],style={'padding':'10px 5px 1px 5px','border-radius':'10px','backgroundColor':'#FFFFFF','margin':'10px','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'})
],style={'padding':'1px 5px 1px 5px','margin':'10px 20px 20px 60px'}),


html.Div(className="row",children=[
    html.Div(children=[dcc.Graph(
        id='graph-persentase',
        figure=fig_persentase,style={'height':'70vh'}
    )],style={'padding':'10px 5px 1px 5px','border-radius':'10px','margin':'10px','backgroundColor':'#FFFFFF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'})
],style={'padding':'1px 5px 1px 5px','margin':'10px 70px 20px 60px'}),


html.Div(style={'padding':'1px 5px 1px 5px','margin':'30px 0px 0px 80px'},children=[
    html.H2(style={'text-align': 'left','color': '#5E637C','font-size':'20px'} ,children='Informasi Tes Covid')]),


    html.Div([dcc.Graph(
        id='graph-tes',
        figure=fig5,style={'height':'70vh'}
    ),dcc.Graph(
        id='graph-6',
        figure=fig8,style={'height':'50vh'}
    ),dcc.Graph(
        id='graph-7',
        figure=fig9,style={'height':'50vh'}
    ),dcc.Graph(
        id='graph-8',
        figure=fig6,style={'height':'50vh'}
    ),dcc.Graph(
        id='graph-9',
        figure=fig7,style={'height':'50vh'}
    )],style={'padding':'1px 5px 1px 5px','border-radius':'10px','margin':'0px 80px 20px 75px','backgroundColor':'#FFFFFF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),  
    
    html.Div(style={'padding':'1px 5px 1px 5px','margin':'50px 0px 0px 80px'},children=[
    html.H2(style={'text-align': 'left','color': '#5E637C','font-size':'20px'} ,children='Prediksi dengan Machine Learning Model')]),

    html.Div([

        html.Div([
        html.Label(children='Pilih Model Machine Learning'),dcc.Dropdown(id='pilih_model',
        options=[{'label': i, 'value': i} for i in nama_model],
        value="Holt's Linear")],style={'padding':'20px 20px 5px 20px'}),
        
        dcc.Graph(id='graphml'),],style={'padding':'1px 5px 1px 5px','border-radius':'10px','margin':'0px 80px 20px 75px','backgroundColor':'#FFFFFF','box-shadow': '0 4px 8px 0 rgba(0, 0, 0, 0.2)'}),
    
    html.Div(style={'height:':'100px','padding':'80px 80px 80px 80px','margin':'50px 0px 0px 0px'},children=[
    html.Div(style={'text-align': 'center','color': '#000000'} ,children='Adrian Stanislaus | David Millenov | Wildan Rahadian')]),
])

@app.callback(
    Output('graphml', 'figure'),
    [Input('pilih_model', 'value')])
def update_figure(modelnya):
  nomor = df[df['nama_modelml'] == modelnya].index[0]
  nama = model_predictions.columns[nomor+1]
  
  figml = go.Figure()

#Total Kasus
  figml.add_trace(go.Scatter(x = model_predictions['Dates'], y = model_predictions[nama],
                  name='Prediksi', mode='lines+markers'))

  figml.add_trace(go.Scatter(x = datacovid.index, y = datacovid["Total kasus"],
                  name='Total Kasus', mode='lines+markers'))
  
  figml.update_layout(showlegend=True, xaxis_title="Tanggal",yaxis_title="Jumlah Kasus",hovermode='x',margin=dict(l=20, r=20, t=20, b=20),legend=dict(
    orientation="h",
    yanchor="bottom",
    y=1.02,
    xanchor="right",
    x=1
  ))

  figml.update_layout(transition_duration=500)

  return figml

# Run app and display result inline in the notebook
app.run_server(mode='external',host="0.0.0.0",port=1005)